---
title: Upgrade Terraform Version
weight: 54
last_reviewed_on: 2021-03-22
review_in: 3 months
---

# Upgrade Terraform Version

## Introduction
The intention of this document is to provide you a method to upgrade the Terraform version used in state across the MoJ Cloud Platform.

## Recommendations
- Install TF Switch to allow you to switch between Terraform versions.

## Caveats
This document was originally written following the Terraform 0.13 to 0.14 upgrade, it's worth noting this was the best course of action for that particular upgrade. Over time, this document will evolve with the intention of full automation.

## How to perform the upgrade
As The Cloud Platform team have decided to use a multi-repository approach to Terraform modules, this means there's a large distributed code base you'll be required to ammend. This section of the guide will suggest an approach to break this work down and tackle section by section. At a high level we have two Terraform state monoliths managed within the same state bucket:

- Cloud Platform Environments. This holds tenant state, things like a Kubernetes namespace or RDS instance.
- Cloud Platform Infrastructure. This state represents everything required to build an MoJ Cloud Platform Kubernetes cluster and it's accompanying components.

Each of the sections above require individual attention that will be outlined below.

### Before the upgrade
There are three tasks that are recommended before performing a Terraform upgrade.

#### Check warnings and notices
Terraform is good at warning end users of deprecations in future releases. Check the output of a Terraform init/validation/plan for messages of deprecations of resources that will disappear in future releases. For example, this message appeared in our Environments CI/CD:

```bash
Warning: Interpolation-only expressions are deprecated

  on .terraform/modules/example_team_es/main.tf line 104, in data "aws_iam_policy_document" "elasticsearch_role_snapshot_policy":
```

It is recommended to act on these messages and look for how and why Terraform are deprecating to implement a work around or solution.

#### Read the release notes carefully
This sounds simple enough but it is vitally important you understand what changes are being made to your Terraform state.

#### Run a terraform init
Using a tool such as tf-switch, switch to your new version and perform the command `terraform init -backend=false`. The output of this command will give you a general idea of what needs to change before your perform the upgrade. the `-backend=false` ensures the state isn't touched.

Please note - this process is a lot harder to test on an Environments state file.

### Environments state files
Arguably the most disruptive state files we have. The Cloud Platform Environments repository contains directories for every namespace in the MoJ Cloud Platform, for each namespace there is a single Terraform state file stored in an S3 bucket. As there are so many state files it is recommened to perform the following.

#### Use the "apply" pipeline
We currently use a concourse pipeline to `terraform init/apply` everything in the cloud-platform-environments GitHub repository. This pipeline has a number of environment variables that allow it to comminicate with the state bucket and amend the necessary state file. Use this pipeline to make amendments to any further state.

#### Upgrade the tools image
Add your new Terraform version to the cloud-platform-tools image along with the old version. This will allow you to run both versions simultaneously.

#### Add conditional logic
Add an if condition to the apply library that checks the version outlined in each `versions.tf` files in a namespace.

#### Upgrade all Terraform modules
This is fairly tricky as there may be over fifty repositories to upgrade. If the Terraform syntax has changed you'll need to run the `upgrade` command on each module (repository). This can be tedious if performed manually so there is some Go code that does this on your behalf. https://github.com/ministryofjustice/cloud-platform-terraform-upgrade

Using the example of upgrading to Terraform 0.13, run the following:

```bash
git clone https://github.com/ministryofjustice/cloud-platform-terraform-upgrade
go run main.go -o "ministryofjustice" -r "cloud-platform-terraform" -c "terraform 0.13upgrade"
```

The code will pull down every repository in the "ministryofjustice" organisation with the name that contains "cloud-platform-terraform" and run the command "terraform 0.13upgrade". The code will then commit and create a Pull Request against each repository using your GitHub credentials.

Note: Terraform will release an upgrade command for each release that contains syntax changes, in the example above 0.13upgrade was used to create a more detailed `versions.tf`.

Once all the Pull Requests have been reviewed, merge them into main and create a new release.

#### Upgrade a test namespace
It is difficult to test an upgrade on the Environments state, this is the best way to do so as of writing this document. At this point you should have new releases for each Terraform module, if not then please perform the steps above.

- Create a test namespace in the cloud-platform-environments repository called `abdundance-namespace-dev` (will probably be the first namespace applied).
- Add every resource available using the release before the Terraform upgrade work above, i.e. RDS, S3 (a full list can be found here).
- Create a pull request and then merge to main.

After the above resources are built, then perform:

- Bump all of your resources to the latest, containing the Terraform upgrade.
- Change the version in versions.tf to reflect the new version.
- Create a Pull Request against main.
- Monitor possible changes in the plan. It should require no changes.
- If you're happy with the output of the plan pipeline, merge it into main.

#### Upgrade all non-production namespaces
When you're happy to begin upgrading users namespaces run the upgrade command against the cloud-platform-environments repository or upgrade all namespaces manually.

If you decide to use the tool above then perform the following:

```bash
git clone https://github.com/ministryofjustice/cloud-platform-terraform-upgrade
go run main.go -o "ministryofjustice" -r "cloud-platform-environments" -c "terraform 0.13upgrade" --no-commit
cd repositories
```

The `no-commit` argument pulls down the required repository, runs the command against all namespaces but doesn't commit the changes. You'll want to pick and choose which namespaces to commit to ensure you're happy. I'd recommend creating a new branch and commiting the non-production namespaces only, i.e. any namespace that isn't "-prod".

Create a pull request against main and watch the plan pipeline once more. Again this should be clean.

If the plan applies no changes and you're happy, merge this into main.

#### Upgrade all production namespaces
Perform the above on all production namespaces.

#### Tidying up
When all namespaces are using the new version of Terraform you can begin to clean-up any changes you've made. 

- Remove the multiple Terraform binaries from the cloud-platform-tools image.
- Remove the conditional logic in the apply library.

### Infrastructure state files

#### Start outwards
#### Run terraform init/validate
#### Upgrade all Terraform modules
#### Ensure all "third-party" modules conform
#### Perform terraform init/valdidate manually
#### Work inwards
#### Upgrade the cloud-platform-cli image

